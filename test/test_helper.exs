ExUnit.start()

defmodule Drill do
  @moduledoc """
  Helper functions that create wiredata test files in "test/data"

  """

  @data_dir Path.join([File.cwd!(), "test", "data"])
  @temp_dir System.tmp_dir!()
  @header """
  #
  # Autogenerated file using drill
  # - see test_helper.exs
  #

  """

  @samples [
    # {domain, type, use(-D -b 4096)?}
    {"example.com", :A, false},
    {"cloudflare.com", :A, false},
    {"example.com", :AAAA, false},
    {"cloudflare.com", :AAAA, false},
    {"google.nl", :CAA, false},
    {"internet.nl", :CAA, false},
    {"cloudflare.com", :CAA, false},
    {"tcp53.ch", :CDNSKEY, false},
    {"dnsimple.zone", :CDNSKEY, false},
    {"www.us.gov", :CNAME, false},
    {"www.azure.com", :CNAME, false},
    {"www.sidn.nl", :CNAME, false},
    {"einbeispiel.ch", :CDS, false},
    {"tcp53.ch", :CDS, false},
    {"dnsimple.zone", :CDS, false},
    {"us.gov", :DNSKEY, false},
    {"sidn.nl", :DNSKEY, false},
    {"internet.nl", :DNSKEY, false},
    {"example.com", :DNSKEY, false},
    {"us.gov", :DS, false},
    {"sidn.nl", :DS, false},
    {"internet.nl", :DS, false},
    {"example.com", :DS, false},
    {"google.nl", :MX, false},
    {"google.com", :MX, false},
    {"sidn.nl", :MX, false},
    {"example.com", :MX, false},
    {"google.nl", :NS, false},
    {"google.com", :NS, false},
    {"sidn.nl", :NS, false},
    {"example.com", :NS, false},
    {"einbeispiel.ch", :NSEC, false},
    {"switch.ch", :NSEC, false},
    {"iana.org", :NSEC, false},
    {"x.example.com", :NSEC3, true},
    {"x.example.net", :NSEC3, true},
    {"example.com", :NSEC3PARAM, true},
    {"example.net", :NSEC3PARAM, true},
    {"cloudflare.com", :OPT, true},
    {"dnssec-failed.org", :OPT, true},
    {"27.27.250.142.in-addr.arpa", :PTR, false},
    {"27.27.250.142.in-addr.arpa", :PTR, false},
    {"26.27.250.142.in-addr.arpa", :PTR, false},
    {"27.102.250.142.in-addr.arpa", :PTR, false},
    {"26.102.250.142.in-addr.arpa", :PTR, false},
    {"internet.nl", :RRSIG, true},
    {"iana.org", :RRSIG, true},
    {"sidn.nl", :RRSIG, true},
    {"example.com", :RRSIG, true},
    {"internet.nl", :SOA, false},
    {"iana.org", :SOA, false},
    {"example.com", :SOA, false},
    {"example.net", :SOA, false},
    {"_25._tcp.vmx01.prolocation.nl", :TLSA, false},
    {"_25._tcp.esa.sidn.nl", :TLSA, false},
    {"google.nl", :TXT, true},
    {"google.com", :TXT, true},
    {"sidn.nl", :TXT, true},
    {"example.com", :TXT, true}
  ]

  # Black magic
  # 1. % drill -w wiredata.txt example.com A
  #    - produces wiredata.txt
  #    - no output shown in the console
  #
  # 2. {output, 0} = System.cmd("drill", ["-w", "wiredata.txt", "example.com", "A"])
  #    - output actually contains the output I expected to see in the console
  #    - mayby some stdin/out redirection behind the scenes?

  unless File.exists?(@data_dir),
    do: File.mkdir!(@data_dir)

  @doc """
  Runs a drill using given `name`, `type` and `options`, returns the wiredata

  Needs a working Internet connection since resolving is against 8.8.8.8, since
  local systemd only handles common record types and no DNSSEC related ones.

  Options include:
  - `:D`, if given, should be "-D"
  - `:B`, if given, should be "-b xxxx" where x is your udp recv buffer size
  """
  def drill(name, type, opts \\ []) do
    # put a unique number in filename just in case tests run async
    nr = System.unique_integer([:positive, :monotonic])
    tmp_file = Path.join(@temp_dir, "drill-#{nr}.txt")

    args = [name, "#{type}"] ++ opts ++ ["-w", tmp_file, "@8.8.8.8"]
    {output, 0} = System.cmd("drill", args)
    output = String.split(output, "\n")

    {:ok, wiredata} =
      File.read!(tmp_file)
      |> String.replace(~r/;.*\n/, "")
      |> String.replace(~r/\s*/, "")
      |> Base.decode16(case: :lower)

    File.rm!(tmp_file)
    {name, type, output, wiredata}
  end

  @doc """
  Creates wire-samples in test data dir & returns samples

  """
  def wire_samples(forced \\ false) do
    fname = Path.join(@data_dir, "wire-samples.txt")

    if forced or not File.exists?(fname) do
      samples =
        for {name, type, useD} <- @samples do
          opts = (useD && ["-D", "-b", "4096"]) || []
          drill(name, type, opts)
        end

      File.write(fname, "#{@header}#{inspect(samples, limit: :infinity, pretty: true)}\n")
    end

    # always eval the file, in case we're not forced and file existed
    {expression, []} = Code.eval_file(fname)
    expression
  end

  @doc """
  Returns a single wiredata sample.

  Used to check if RR is decoded properly.
  """
  def get_sample(name, type, opts \\ []) do
    forced = Keyword.get(opts, :forced, false)
    useD = Keyword.get(opts, :useD, false)
    fname = Path.join(@data_dir, "#{type}-#{name}-sample")

    if forced or not File.exists?(fname) do
      opts = (useD && ["-D", "-b", "4096"]) || []
      sample = drill(name, type, opts)
      File.write(fname, "#{@header}#{inspect(sample, limit: :infinity, pretty: true)}\n")
    end

    {expression, []} = Code.eval_file(fname)
    expression
  end
end
