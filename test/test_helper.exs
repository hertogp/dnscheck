ExUnit.start()

defmodule Drill do
  @moduledoc """
  Test helper functions that create test files in "test/data"

  """

  @data_dir Path.join([File.cwd!(), "test", "data"])
  @temp_dir System.tmp_dir!()

  @header """
  #
  # Autogenerated file using drill
  # - see test_helper.exs
  #

  """

  # Black magic
  # % drill -w wiredata.txt example.com A
  # - produces wiredata.txt
  # - no output shown in the console
  # {output, 0} = System.cmd("drill", ["-w", "wiredata.txt", "example.com", "A"])
  # - output actually contains the output I expected to see in the console
  #   mayby some stdin/out redirection behind the scenes?

  unless File.exists?(@data_dir),
    do: File.mkdir!(@data_dir)

  @doc """
  Runs a drill using given `name`, `type` and `options`, returns the wiredata

  Needs a working Internet connection since resolving is against 8.8.8.8, since
  local systemd only handles common record types and no DNSSEC related ones.
  """
  def drill(name, type, opts \\ []) do
    # put a unique number in filename just in case tests run async
    dopt = Keyword.get(opts, :D, "")
    bopt = Keyword.get(opts, :B, "") |> String.split()
    nr = System.unique_integer([:positive, :monotonic])
    tmp_file = Path.join(@temp_dir, "drill-#{nr}.txt")

    args =
      [name, "#{type}", dopt, bopt, "-w", tmp_file, "@8.8.8.8"]
      |> List.flatten()
      |> Enum.filter(fn w -> w != "" end)

    {output, 0} = System.cmd("drill", args)
    output = String.split(output, "\n")

    {:ok, wiredata} =
      File.read!(tmp_file)
      |> String.replace(~r/;.*\n/, "")
      |> String.replace(~r/\s*/, "")
      |> Base.decode16(case: :lower)

    File.rm!(tmp_file)
    {name, type, output, wiredata}
  end

  def ensure_testfile(fname, forced \\ false) do
    if forced or not File.exists?(fname),
      do: generate_tests(fname)

    :ok
  end

  def generate_tests(fname) when fname == "test/data/a-samples" do
    tests =
      ["google.nl", "google.com", "sidn.nl", "example.com"]
      |> Enum.map(fn name -> drill(name, :A) end)

    File.write(fname, "#{@header}#{inspect(tests, limit: :infinity, pretty: true)}")
  end

  def generate_tests(fname) when fname == "test/data/aaaa-samples" do
    tests =
      ["google.nl", "google.com", "sidn.nl", "example.com"]
      |> Enum.map(fn name -> drill(name, :AAAA) end)

    File.write(fname, "#{@header}#{inspect(tests, limit: :infinity, pretty: true)}")
  end

  def generate_tests(fname) when fname == "test/data/caa-samples" do
    tests =
      ["google.nl", "sidn.nl", "internet.nl", "google.com"]
      |> Enum.map(fn name -> drill(name, :CAA) end)

    File.write(fname, "#{@header}#{inspect(tests, limit: :infinity, pretty: true)}")
  end

  def generate_tests(fname) when fname == "test/data/cname-samples" do
    tests =
      ["www.us.gov", "www.azure.com", "www.sidn.nl", "www.aws.com", "www.amazon.com"]
      |> Enum.map(fn name -> drill(name, :CNAME) end)

    File.write(fname, "#{@header}#{inspect(tests, limit: :infinity, pretty: true)}")
  end

  def generate_tests(fname) when fname == "test/data/dnskey-samples" do
    tests =
      ["us.gov", "sidn.nl", "internet.nl", "example.com"]
      |> Enum.map(fn name -> drill(name, :DNSKEY) end)

    File.write(fname, "#{@header}#{inspect(tests, limit: :infinity, pretty: true)}")
  end

  def generate_tests(fname) when fname == "test/data/ds-samples" do
    tests =
      ["us.gov", "sidn.nl", "internet.nl", "example.com"]
      |> Enum.map(fn name -> drill(name, :DS) end)

    File.write(fname, "#{@header}#{inspect(tests, limit: :infinity, pretty: true)}")
  end

  def generate_tests(fname) when fname == "test/data/mx-samples" do
    tests =
      ["google.nl", "google.com", "sidn.nl", "example.com"]
      |> Enum.map(fn name -> drill(name, :MX) end)

    File.write(fname, "#{@header}#{inspect(tests, limit: :infinity, pretty: true)}")
  end

  def generate_tests(fname) when fname == "test/data/ns-samples" do
    tests =
      ["google.nl", "google.com", "sidn.nl", "example.com"]
      |> Enum.map(fn name -> drill(name, :NS) end)

    File.write(fname, "#{@header}#{inspect(tests, limit: :infinity, pretty: true)}")
  end

  def generate_tests(fname) when fname == "test/data/rrsig-samples" do
    tests =
      ["internet.nl", "iana.org", "sidn.nl", "example.com"]
      |> Enum.map(fn name -> drill(name, :RRSIG, B: "-b 3000") end)

    File.write(fname, "#{@header}#{inspect(tests, limit: :infinity, pretty: true)}")
  end

  def generate_tests(fname) when fname == "test/data/soa-samples" do
    tests =
      ["google.nl", "google.com", "sidn.nl", "example.com"]
      |> Enum.map(fn name -> drill(name, :SOA) end)

    File.write(fname, "#{@header}#{inspect(tests, limit: :infinity, pretty: true)}")
  end

  def generate_tests(fname) when fname == "test/data/txt-samples" do
    tests =
      ["google.nl", "google.com", "sidn.nl", "example.com"]
      |> Enum.map(fn name -> drill(name, :TXT, B: "-b 3000") end)

    File.write(fname, "#{@header}#{inspect(tests, limit: :infinity, pretty: true)}")
  end
end
